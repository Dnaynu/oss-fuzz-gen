"functions":
- "name": "_ZN6google10LogMessageD2Ev"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::~~LogMessage()"
- "name": "_ZN6google10LogMessageC2EPKciiiMS0_FvvE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::LogMessage(const char *, int, LogSeverity, int, DW_TAG_ptr_to_member_typeDW_TAG_subroutine_typeInfinite loop)"
- "name": "_ZN6google10LogMessageC2EPKciiPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::LogMessage(const char *, int, LogSeverity, string *)"
- "name": "_ZN6google15ErrnoLogMessageD2Ev"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::ErrnoLogMessage::~~ErrnoLogMessage()"
- "name": "_ZN6google10LogMessageC2EPKci"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  "return_type": "void"
  "signature": "void google::LogMessage::LogMessage(const char *, int)"
- "name": "_ZN6google10LogMessage15SaveOrSendToLogEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::SaveOrSendToLog()"
- "name": "_ZN6google9SendEmailEPKcS1_S1_"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "bool"
  "signature": "bool google::SendEmail(const char *, const char *, const char *)"
- "name": "_ZN6google15LogMessageFatalC2EPKci"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  "return_type": "void"
  "signature": "void google::LogMessageFatal::LogMessageFatal(const char *, int)"
- "name": "_ZN6google15LogMessageFatalD2Ev"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessageFatal::~~LogMessageFatal()"
- "name": "_ZN6google10LogMessageC2EPKciiPNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::LogMessage(const char *, int, LogSeverity, vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > *)"
- "name": "_ZN6google13SetLogSymlinkEiPKc"
  "params":
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::SetLogSymlink(LogSeverity, const char *)"
- "name": "_ZN6google15ErrnoLogMessageC2EPKciiiMNS_10LogMessageEFvvE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::ErrnoLogMessage::ErrnoLogMessage(const char *, int, LogSeverity, int, DW_TAG_ptr_to_member_typeDW_TAG_subroutine_typeInfinite loop)"
- "name": "_ZN6google10LogMessageC2EPKcii"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  "return_type": "void"
  "signature": "void google::LogMessage::LogMessage(const char *, int, LogSeverity)"
- "name": "_ZN6google14LogDestination13SetLogSymlinkEiPKc"
  "params":
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogDestination::SetLogSymlink(LogSeverity, const char *)"
- "name": "_ZN6google10LogMessage19WriteToStringAndLogEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::WriteToStringAndLog()"
- "name": "_ZN6googlelsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_15PRIVATE_CounterE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "ostream & google::operator<<(ostream &, const DW_TAG_enumeration_typePRIVATE_Counter &)"
- "name": "_ZN6google10LogMessage18SendToSyslogAndLogEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::SendToSyslogAndLog()"
- "name": "_ZN6google10LogMessage9SendToLogEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::SendToLog()"
- "name": "GMTGetZawgyiProbability"
  "params":
  - "name": "detector"
    "type": "bool "
  - "name": "input_utf8"
    "type": "bool "
  "return_type": "double"
  "signature": "double GMTGetZawgyiProbability(GMTZawgyiDetector *, const char *)"
- "name": "_ZN6google17InitGoogleLoggingEPKc"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::InitGoogleLogging(const char *)"
- "name": "_ZN6google12_GLOBAL__N_120FailureSignalHandlerEiP9siginfo_tPv"
  "params":
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::(anonymous namespace)::FailureSignalHandler(int, siginfo_t *, void *)"
- "name": "_ZN6google15TruncateLogFileEPKcll"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "size_t"
  "return_type": "void"
  "signature": "void google::TruncateLogFile(const char *, int64, int64)"
- "name": "_ZN6google10LogMessage16SendToSinkAndLogEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::SendToSinkAndLog()"
- "name": "_ZN6google10LogMessageC2EPKciiPNS_7LogSinkEb"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool"
  "return_type": "void"
  "signature": "void google::LogMessage::LogMessage(const char *, int, LogSeverity, LogSink *, bool)"
- "name": "_ZN6google10LogMessage5FlushEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "void google::LogMessage::Flush()"
- "name": "_ZN6google12_GLOBAL__N_113LogFileObject5WriteEblPKci"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool"
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  "return_type": "void"
  "signature": "void google::(anonymous namespace)::LogFileObject::Write(bool, time_t, const char *, int)"
"language": "c++"
"project": "myanmar-tools"
"target_name": "zawgyi_detector_fuzz_target"
"target_path": "/src/myanmar-tools/clients/cpp/zawgyi_detector_fuzz_target.cpp"
"test_files":
- "test_file_path": "/usr/share/cmake-3.16/Modules/FindMPI/test_mpi.c"
- "test_file_path": "/root/.hunter/_Base/Download/Hunter/0.21.19/5ead1e0/Unpacked/examples/doctest/foo_test_main.cpp"
- "test_file_path": "/root/.hunter/_Base/Download/Hunter/0.21.19/5ead1e0/Unpacked/examples/ccv/test.c"
- "test_file_path": "/src/myanmar-tools/clients/cpp/zawgyi_detector_unittest.cpp"
- "test_file_path": "/src/myanmar-tools/clients/cpp/zawgyi_detector_unittest.c"
- "test_file_path": "/root/.hunter/_Base/Download/Hunter/0.21.19/5ead1e0/Unpacked/examples/FakeIt/fakeit_test.cpp"
- "test_file_path": "/root/.hunter/_Base/Download/Hunter/0.21.19/5ead1e0/Unpacked/examples/rocksdb/test.cpp"
- "test_file_path": "/root/.hunter/_Base/Download/Hunter/0.21.19/5ead1e0/Unpacked/examples/doctest/foo_test.cpp"
- "test_file_path": "/root/.hunter/_Base/Download/Hunter/0.21.19/5ead1e0/Unpacked/examples/Catch/foo_test.cpp"
