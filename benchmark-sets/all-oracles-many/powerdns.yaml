"functions":
- "name": "_ZN5QTypeaSERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "s"
    "type": "bool "
  "return_type": "void"
  "signature": "QType & QType::operator=(const string &)"
- "name": "_ZNK5boost9function2INS_14iterator_rangeINSt3__111__wrap_iterIPKcEEEES6_S6_EclES6_S6_"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "a0"
    "type": "bool "
  - "name": "a1"
    "type": "bool "
  "return_type": "void"
  "signature": "result_type boost::function2<boost::iterator_range<std::__1::__wrap_iter<char const*> >, std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*> >::operator()(const function2<boost::iterator_range<std::__1::__wrap_iter<char *> >, std::__1::__wrap_iter<char *>, std::__1::__wrap_iter<char *> > *, __wrap_iter<char *>, __wrap_iter<char *>)"
- "name": "_ZN6Logger3logERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_7UrgencyE"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "msg"
    "type": "bool "
  - "name": "u"
    "type": "int"
  "return_type": "void"
  "signature": "void Logger::log(const string &, DW_TAG_enumeration_typeUrgency)"
- "name": "_ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERK7DNSName"
  "params":
  - "name": "os"
    "type": "bool "
  - "name": "d"
    "type": "bool "
  "return_type": "void"
  "signature": "ostream & operator<<(ostream &, const DNSName &)"
- "name": "_ZNK5boost10wrapexceptINS_2io13too_many_argsEE5cloneEv"
  "params":
  - "name": "this"
    "type": "bool "
  "return_type": "void"
  "signature": "const clone_base * boost::wrapexcept<boost::io::too_many_args>::clone(const struct wrapexcept<std::length_error> *)"
- "name": "_ZN5boost15circular_bufferINSt3__15tupleIJ7DNSName5QTypeEEENS1_9allocatorIS5_EEE8allocateEm"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "n"
    "type": "size_t"
  "return_type": "void"
  "signature": "pointer boost::circular_buffer<std::__1::tuple<DNSName, QType>, std::__1::allocator<std::__1::tuple<DNSName, QType> > >::allocate(circular_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > *, size_type)"
- "name": "_ZN5boost9algorithm14split_iteratorINSt3__111__wrap_iterIPKcEEE9incrementEv"
  "params":
  - "name": "this"
    "type": "bool "
  "return_type": "void"
  "signature": "void boost::algorithm::split_iterator<std::__1::__wrap_iter<char const*> >::increment(split_iterator<std::__1::__wrap_iter<char *> > *)"
- "name": "_ZNK5boost10wrapexceptINS_2io17bad_format_stringEE5cloneEv"
  "params":
  - "name": "this"
    "type": "bool "
  "return_type": "void"
  "signature": "const clone_base * boost::wrapexcept<boost::io::bad_format_string>::clone(const struct wrapexcept<std::length_error> *)"
- "name": "_ZN5QTypeaSEPKc"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "p"
    "type": "bool "
  "return_type": "void"
  "signature": "QType & QType::operator=(const char *)"
- "name": "_ZN5boost15circular_bufferINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS5_IS7_EEE8allocateEm"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "n"
    "type": "size_t"
  "return_type": "void"
  "signature": "pointer boost::circular_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::allocate(circular_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > *, size_type)"
- "name": "_ZN6LoggerlsERFRNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEES5_E"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "Logger & Logger::operator<<(DW_TAG_subroutine_typeInfinite loop &)"
- "name": "_ZN11NetmaskTreeIb7NetmaskEaSERKS1_"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "rhs"
    "type": "bool "
  "return_type": "void"
  "signature": "NetmaskTree<bool, Netmask> & NetmaskTree<bool, Netmask>::operator=(const NetmaskTree<bool, Netmask> &)"
- "name": "_ZNK6YaHTTP8HTTPBase5writeERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "os"
    "type": "bool "
  "return_type": "void"
  "signature": "void YaHTTP::HTTPBase::write(ostream &)"
- "name": "_ZN18DNSDistPacketCache3getER11DNSQuestiontPjRN5boost8optionalI7NetmaskEEbbjbbb"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "dnsQuestion"
    "type": "bool "
  - "name": "queryId"
    "type": "short"
  - "name": "keyOut"
    "type": "bool "
  - "name": "subnet"
    "type": "bool "
  - "name": "dnssecOK"
    "type": "bool"
  - "name": "receivedOverUDP"
    "type": "bool"
  - "name": "allowExpired"
    "type": "int"
  - "name": "skipAging"
    "type": "bool"
  - "name": "truncatedOK"
    "type": "bool"
  - "name": "recordMiss"
    "type": "bool"
  "return_type": "bool"
  "signature": "bool DNSDistPacketCache::get(struct DNSQuestion &, uint16_t, uint32_t *, optional<Netmask> &, bool, bool, uint32_t, bool, bool, bool)"
- "name": "_ZNK5boost10wrapexceptISt12length_errorE5cloneEv"
  "params":
  - "name": "this"
    "type": "bool "
  "return_type": "void"
  "signature": "const clone_base * boost::wrapexcept<std::length_error>::clone(const struct wrapexcept<std::length_error> *)"
- "name": "_ZN18DNSDistPacketCache10CacheValueaSERKS0_"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "struct CacheValue & DNSDistPacketCache::CacheValue::operator=(struct CacheValue *, const struct CacheValue &)"
- "name": "_ZN6LoggerlsERK7DNSName"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "d"
    "type": "bool "
  "return_type": "void"
  "signature": "Logger & Logger::operator<<(const DNSName &)"
- "name": "_ZN5boost15circular_bufferI13SComboAddressNSt3__19allocatorIS1_EEE8allocateEm"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "n"
    "type": "size_t"
  "return_type": "void"
  "signature": "pointer boost::circular_buffer<SComboAddress, std::__1::allocator<SComboAddress> >::allocate(circular_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > *, size_type)"
- "name": "_ZN6YaHTTPlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_7RequestE"
  "params":
  - "name": "os"
    "type": "bool "
  - "name": "req"
    "type": "bool "
  "return_type": "void"
  "signature": "ostream & YaHTTP::operator<<(ostream &, const Request &)"
- "name": "_ZN6LoggerlsERK12ComboAddress"
  "params":
  - "name": "this"
    "type": "bool "
  - "name": "ca"
    "type": "bool "
  "return_type": "void"
  "signature": "Logger & Logger::operator<<(const DW_TAG_union_typeComboAddress &)"
- "name": "_ZNK5boost10wrapexceptINS_2io12too_few_argsEE5cloneEv"
  "params":
  - "name": "this"
    "type": "bool "
  "return_type": "void"
  "signature": "const clone_base * boost::wrapexcept<boost::io::too_few_args>::clone(const struct wrapexcept<std::length_error> *)"
- "name": "_ZN6YaHTTPlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_8ResponseE"
  "params":
  - "name": "os"
    "type": "bool "
  - "name": "resp"
    "type": "bool "
  "return_type": "void"
  "signature": "ostream & YaHTTP::operator<<(ostream &, const Response &)"
"language": "c++"
"project": "powerdns"
"target_name": "fuzz_target_proxyprotocol"
"target_path": "/src/pdns/pdns/fuzz_proxyprotocol.cc"
"test_files":
- "test_file_path": "/src/boost_1_84_0/libs/lexical_cast/test/typedefed_wchar_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/qvm/test/mul_ms_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/dll/test/structures_tests.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/polygon/test/polygon_rectangle_formation_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/core/test/allocator_const_void_pointer_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/math/reporting/performance/test_ellint_3c.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/multiprecision/performance/performance_test_files/test27.cpp"
- "test_file_path": "/src/pdns/pdns/dnsdistdist/test-mplexer.cc"
- "test_file_path": "/src/boost_1_84_0/libs/gil/test/extension/io/tiff/tiff_tiled_rgb_contig_test_21-31_32_64.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/multiprecision/test/math/test_legendre.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/container/test/boost_iterator_comp_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/units/test/test_output.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/phoenix/test/bll_compatibility/rvalue_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/exception/test/visibility_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/regex/test/regress/test_perl_ex.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/histogram/test/histogram_threaded_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/unordered/test/unordered/scary_tests.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/vmd/test/test_seq_equal.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/io/test/quoted_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/smart_ptr/test/make_unique_array_noinit_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/iostreams/test/dual_seekable_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/math/test/compile_test/interpolators_cardinal_trig_incl_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/test/example/unit_test_example_03.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/phoenix/test/function/lazy_make_pair_tests.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/system/test/errc_test2.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/compute/test/test_set_difference.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/poly_collection/test/test_registration_main.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/unordered/test/unordered/narrow_cast_tests.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/qvm/test/deduce_scalar_mq_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/serialization/test/test_dll_simple.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/move/test/copy_elision_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/math/test/compile_test/interpolators_whittaker_shannon_incl_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/vmd/test/test_equal_tuple.cxx"
- "test_file_path": "/src/boost_1_84_0/libs/type_erasure/test/test_interface_order.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/phoenix/test/scope/lambda_tests9.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/bimap/test/test_bimap_ordered.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/algorithm/minmax/test/minmax_element_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/system/test/throw_test.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/spirit/classic/test/switch_tests_single.cpp"
- "test_file_path": "/src/boost_1_84_0/libs/unordered/test/unordered/unnecessary_copy_tests.cpp"
