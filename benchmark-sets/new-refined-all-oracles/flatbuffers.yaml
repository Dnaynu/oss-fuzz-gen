functions:
- name: _ZNK11flatbuffers7EnumVal9SerializeEPNS_21FlatBufferBuilderImplILb0EEERKNS_6ParserE
  params:
  - name: this
    type: 'bool '
  - name: builder
    type: 'bool '
  - name: parser
    type: 'bool '
  return_type: int
  signature: struct Offset<reflection::EnumVal> flatbuffers::EnumVal::Serialize(const
    struct EnumVal *, FlatBufferBuilder *, const Parser &)
- name: _ZNK11flatbuffers8FieldDef9SerializeEPNS_21FlatBufferBuilderImplILb0EEEtRKNS_6ParserE
  params:
  - name: this
    type: 'bool '
  - name: builder
    type: 'bool '
  - name: id
    type: short
  - name: parser
    type: 'bool '
  return_type: int
  signature: struct Offset<reflection::Field> flatbuffers::FieldDef::Serialize(const
    struct FieldDef *, FlatBufferBuilder *, uint16_t, const Parser &)
- name: _ZN10reflection11CreateFieldERN11flatbuffers21FlatBufferBuilderImplILb0EEENS0_6OffsetINS0_6StringEEENS4_INS_4TypeEEEttldbbbNS4_INS0_6VectorINS4_INS_8KeyValueEEEjEEEENS4_INS9_IS6_jEEEEbtb
  params:
  - name: _fbb
    type: 'bool '
  - name: name
    type: int
  - name: type
    type: int
  - name: id
    type: short
  - name: offset
    type: short
  - name: default_integer
    type: size_t
  - name: default_real
    type: double
  - name: deprecated
    type: bool
  - name: required
    type: bool
  - name: key
    type: bool
  - name: attributes
    type: int
  - name: documentation
    type: int
  - name: optional
    type: bool
  - name: padding
    type: short
  - name: offset64
    type: bool
  return_type: int
  signature: struct Offset<reflection::Field> reflection::CreateField(FlatBufferBuilder
    &, struct Offset<flatbuffers::String>, struct Offset<reflection::Type>, uint16_t,
    uint16_t, int64_t, double, bool, bool, bool, struct Offset<flatbuffers::Vector<flatbuffers::Offset<reflection::KeyValue>,
    unsigned int> >, struct Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>,
    unsigned int> >, bool, uint16_t, bool)
- name: _ZNK11flatbuffers7RPCCall9SerializeEPNS_21FlatBufferBuilderImplILb0EEERKNS_6ParserE
  params:
  - name: this
    type: 'bool '
  - name: builder
    type: 'bool '
  - name: parser
    type: 'bool '
  return_type: int
  signature: struct Offset<reflection::RPCCall> flatbuffers::RPCCall::Serialize(const
    struct RPCCall *, FlatBufferBuilder *, const Parser &)
- name: _ZN11flatbuffers9CopyTableERNS_21FlatBufferBuilderImplILb0EEERKN10reflection6SchemaERKNS3_6ObjectERKNS_5TableEb
  params:
  - name: fbb
    type: 'bool '
  - name: schema
    type: 'bool '
  - name: objectdef
    type: 'bool '
  - name: table
    type: 'bool '
  - name: use_string_pooling
    type: bool
  return_type: int
  signature: struct Offset<const flatbuffers::Table *> flatbuffers::CopyTable(FlatBufferBuilder
    &, const struct Schema &, const struct Object &, const Table &, bool)
- name: _ZN11flatbuffers9SetStringERKN10reflection6SchemaERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEPKNS_6StringEPNS4_6vectorIhNS8_IhEEEEPKNS0_6ObjectE
  params:
  - name: schema
    type: 'bool '
  - name: val
    type: 'bool '
  - name: str
    type: 'bool '
  - name: flatbuf
    type: 'bool '
  - name: root_table
    type: 'bool '
  return_type: void
  signature: void flatbuffers::SetString(const struct Schema &, const string &, const
    struct String *, vector<unsigned char, std::__1::allocator<unsigned char> > *,
    const struct Object *)
- name: _ZN11flatbuffers12GetAnyValueSEN10reflection8BaseTypeEPKhPKNS0_6SchemaEi
  params:
  - name: type
    type: 'bool '
  - name: data
    type: int
  - name: schema
    type: 'bool '
  - name: type_index
    type: 'bool '
  - name: ''
    type: int
  return_type: void
  signature: string flatbuffers::GetAnyValueS(DW_TAG_enumeration_typeBaseType, const
    uint8_t *, const struct Schema *, int)
- name: _ZN11flatbuffers12GenerateTextERKNS_6ParserEPKvPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE
  params:
  - name: parser
    type: 'bool '
  - name: flatbuffer
    type: 'bool '
  - name: _text
    type: 'bool '
  return_type: void
  signature: const char * flatbuffers::GenerateText(const Parser &, const void *,
    string *)
- name: _ZN11flatbuffers18VerifySizePrefixedERKN10reflection6SchemaERKNS0_6ObjectEPKhmjj
  params:
  - name: schema
    type: 'bool '
  - name: root
    type: 'bool '
  - name: buf
    type: 'bool '
  - name: length
    type: size_t
  - name: max_depth
    type: int
  - name: max_tables
    type: int
  return_type: bool
  signature: bool flatbuffers::VerifySizePrefixed(const struct Schema &, const struct
    Object &, const const uint8_t *, const size_t, const uoffset_t, const uoffset_t)
- name: _ZN11flatbuffers6Parser12ParseServiceEPKc
  params:
  - name: this
    type: 'bool '
  - name: filename
    type: 'bool '
  - name: ''
    type: 'bool '
  return_type: void
  signature: CheckedError flatbuffers::Parser::ParseService(const char *)
- name: _ZNK11flatbuffers7EnumDef9SerializeEPNS_21FlatBufferBuilderImplILb0EEERKNS_6ParserE
  params:
  - name: this
    type: 'bool '
  - name: builder
    type: 'bool '
  - name: parser
    type: 'bool '
  return_type: int
  signature: struct Offset<reflection::Enum> flatbuffers::EnumDef::Serialize(const
    struct EnumDef *, FlatBufferBuilder *, const Parser &)
- name: _ZN11flatbuffers6Parser9ParseDeclEPKc
  params:
  - name: this
    type: 'bool '
  - name: filename
    type: 'bool '
  - name: ''
    type: 'bool '
  return_type: void
  signature: CheckedError flatbuffers::Parser::ParseDecl(const char *)
- name: _ZNK11flatbuffers10ServiceDef9SerializeEPNS_21FlatBufferBuilderImplILb0EEERKNS_6ParserE
  params:
  - name: this
    type: 'bool '
  - name: builder
    type: 'bool '
  - name: parser
    type: 'bool '
  return_type: int
  signature: struct Offset<reflection::Service> flatbuffers::ServiceDef::Serialize(const
    struct ServiceDef *, FlatBufferBuilder *, const Parser &)
- name: _ZN11flatbuffers12GetAnyFieldSERKNS_5TableERKN10reflection5FieldEPKNS3_6SchemaE
  params:
  - name: table
    type: 'bool '
  - name: field
    type: 'bool '
  - name: schema
    type: 'bool '
  - name: ''
    type: 'bool '
  return_type: void
  signature: string flatbuffers::GetAnyFieldS(const Table &, const struct Field &,
    const struct Schema *)
- name: _ZNK11flatbuffers9StructDef9SerializeEPNS_21FlatBufferBuilderImplILb0EEERKNS_6ParserE
  params:
  - name: this
    type: 'bool '
  - name: builder
    type: 'bool '
  - name: parser
    type: 'bool '
  return_type: int
  signature: struct Offset<reflection::Object> flatbuffers::StructDef::Serialize(const
    struct StructDef *, FlatBufferBuilder *, const Parser &)
- name: _ZN11flatbuffers15ResizeAnyVectorERKN10reflection6SchemaEjPKNS_11VectorOfAnyEjjPNSt3__16vectorIhNS7_9allocatorIhEEEEPKNS0_6ObjectE
  params:
  - name: schema
    type: 'bool '
  - name: newsize
    type: int
  - name: vec
    type: 'bool '
  - name: num_elems
    type: int
  - name: elem_size
    type: int
  - name: flatbuf
    type: 'bool '
  - name: root_table
    type: 'bool '
  return_type: void
  signature: uint8_t * flatbuffers::ResizeAnyVector(const struct Schema &, uoffset_t,
    const VectorOfAny *, uoffset_t, uoffset_t, vector<unsigned char, std::__1::allocator<unsigned
    char> > *, const struct Object *)
- name: _ZN11flatbuffers16GenTextFromTableERKNS_6ParserEPKvRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEPSB_
  params:
  - name: parser
    type: 'bool '
  - name: table
    type: 'bool '
  - name: table_name
    type: 'bool '
  - name: _text
    type: 'bool '
  return_type: void
  signature: const char * flatbuffers::GenTextFromTable(const Parser &, const void
    *, const string &, string *)
- name: _ZN11flatbuffers6VerifyERKN10reflection6SchemaERKNS0_6ObjectEPKhmjj
  params:
  - name: schema
    type: 'bool '
  - name: root
    type: 'bool '
  - name: buf
    type: 'bool '
  - name: length
    type: size_t
  - name: max_depth
    type: int
  - name: max_tables
    type: int
  return_type: bool
  signature: bool flatbuffers::Verify(const struct Schema &, const struct Object &,
    const const uint8_t *, const size_t, const uoffset_t, const uoffset_t)
language: c++
project: flatbuffers
target_name: flexverifier_fuzzer
target_path: /src/flatbuffers/tests/fuzzer/flexbuffers_verifier_fuzzer.cc
